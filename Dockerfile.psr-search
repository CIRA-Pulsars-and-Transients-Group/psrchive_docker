# Docker file for MWA Pulsar Group
# This container will include the typical
# pulsar searching stack:
# tempo, psrcat, presto, riptide

FROM ubuntu:20.04

# Install dependencies
ARG DEBIAN_FRONTEND=noninteractive
RUN apt-get update && \
    apt-get install -y software-properties-common && \
    add-apt-repository universe && \
    apt-get update && \
    apt-get --no-install-recommends -y install \
    build-essential \
    autoconf \
    autotools-dev \
    automake \
    autogen \
    libtool \
    pkg-config \ 
    cmake \
    csh \
    tcsh \
    g++ \
    gcc \
    gfortran \
    wget \
    git \
    expect \	
    libcfitsio-dev \
    hwloc \
    perl \
    pgplot5 \
    python3 \
    python3-dev \
    python3-testresources \
    python3-pip \
    python3-setuptools \
    python3-pybind11 \
    libfftw3-3 \
    libfftw3-bin \
    libfftw3-dev \
    libfftw3-single3 \
    libx11-dev \
    libglib2.0-dev \
    libpng-dev \
    libpnglite-dev \
    libxml2 \
    libxml2-dev \
    libltdl-dev \
    gsl-bin \
    libgsl-dev \
    libblas-dev \
    liblapack-dev \
    openssh-server \
    latex2html \
    xorg \
    bc \
    xauth \
    locales && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get -y clean

# Set up locale information
RUN localedef -i en_AU -c -f UTF-8 -A /usr/share/locale/locale.alias en_AU.UTF-8
ENV LANG en_AU.utf8
ENV LC_ALL en_AU.utf8
ENV LANGUAGE en_AU.utf8

# Set up base python installs and/or upgrade packages
RUN pip install pip -U && \
    pip install numpy==1.23.5 && \
    pip install scipy && \
    pip install matplotlib && \
    pip install pybind11 -U && \
    pip install ipython -U

# Create psr user which will be used to run commands with reduced privileges.
RUN adduser --disabled-password --gecos 'unprivileged user' psr && \
    echo "psr:psr" | chpasswd && \
    mkdir -p /home/psr/.ssh && \
    chown -R psr:psr /home/psr/.ssh
USER psr

# Define home, psrhome, OSTYPE and create the directory
ENV HOME /home/psr
ENV PSRHOME $HOME/software
ENV OSTYPE linux
RUN mkdir -p $PSRHOME
WORKDIR $PSRHOME

# setup environment variables 

# setup pgplot environment 
ENV PGPLOT_DIR /usr
ENV PGPLOT_FONT $PGPLOT_DIR/lib/pgplot5/grfont.dat
ENV PGPLOT_INCLUDES $PGPLOT_DIR/include
ENV PGPLOT_BACKGROUND white
ENV PGPLOT_FOREGROUND black
ENV PGPLOT_DEV /xs
ENV LD_LIBRARY_PATH $LD_LIBRARY_PATH:$PGPLOT_DIR/lib
ENV C_INCLUDE_PATH $C_INCLUDE_PATH:$PGPLOT_DIR/include
# set swig environment 
ENV SWIG_DIR $PSRHOME/swig 
ENV SWIG_PATH $SWIG_DIR/bin
ENV PATH=$SWIG_PATH:$PATH
ENV SWIG_EXECUTABLE $SWIG_DIR/bin/swig
ENV SWIG $SWIG_EXECUTABLE
# set Psrcat environment
ENV PSRCAT_FILE $PSRHOME/psrcat_tar/psrcat.db
ENV PATH $PATH:$PSRHOME/psrcat_tar

# first get all repos then 
# - build swig
# - build psrcat
# - build tempo
# - build presto
# - build riptide
RUN wget https://www.atnf.csiro.au/research/pulsar/psrcat/downloads/psrcat_pkg.v1.71.tar.gz && tar -xvf psrcat_pkg.v1.71.tar.gz -C $PSRHOME && rm psrcat_pkg.v1.71.tar.gz && \
    wget https://sourceforge.net/projects/swig/files/swig/swig-4.0.1/swig-4.0.1.tar.gz && tar -xvf swig-4.0.1.tar.gz -C $PSRHOME && rm swig-4.0.1.tar.gz && \
    git clone git://git.code.sf.net/p/tempo/tempo tempo && \
    git clone https://github.com/scottransom/presto.git presto && \
    git clone https://github.com/v-morello/riptide.git riptide

# build swig
RUN cd $PSRHOME/swig-4.0.1 && \
    ./configure --prefix=$SWIG_DIR && \
    make && \
    make install && \
    make clean

# build psrcat 
RUN cd $PSRHOME/psrcat_tar && \
    /bin/bash makeit

# set tempo environment
ENV TEMPO_DIR $PSRHOME/tempo
ENV TEMPO $PSRHOME/tempo/install
ENV PATH $PATH:$TEMPO/bin/

# set presto environment
ENV PRESTO_DIR $PSRHOME/presto
ENV PRESTO $PRESTO_DIR
ENV LD_LIBRARY_PATH $LD_LIBRARY_PATH:$PRESTO/lib
ENV PATH $PATH:$PRESTO/bin/

# set riptide envionrment
ENV RIPTIDE_DIR $PSRHOME/riptide

# general *PATH additions
ENV PYTHONPATH $PYTHONPATH:$PSRHOME/lib/python3.8/site-packages
ENV PATH $PATH:$PSRHOME/bin

# tempo (and all it's little utilities)
RUN cd $TEMPO_DIR && \
    ./prepare && \
    ./configure --prefix=$TEMPO && \
    FFLAGS="$FFLAGS -O3 -m64" && \
    make -j && \
    make install && \
    # copy data files and build/install utilities
    cp -r clock/ ephem/ tzpar/ obsys.dat tempo.cfg tempo.hlp $TEMPO && \
    sed -i "s;${TEMPO_DIR};${TEMPO};g" ${TEMPO}/tempo.cfg && \
    cd ${TEMPO_DIR}/src && \
    make matrix && \
    cp matrix ${TEMPO}/bin/ && \
    cd ${TEMPO_DIR}/util/lk && \
    gfortran -o lk lk.f && \
    cp lk ${TEMPO}/bin/ && \
    cp ${TEMPO_DIR}/util/dmx/* ${TEMPO}/bin/ && \
    cp ${TEMPO_DIR}/util/dmxparse/* ${TEMPO}/bin/ && \
    cp ${TEMPO_DIR}/util/dmx_ranges/* ${TEMPO}/bin/ && \
    chmod +x ${TEMPO}/bin/DMX_ranges2.py && \
    cp ${TEMPO_DIR}/util/dmx_broaden/* ${TEMPO}/bin/ && \
    cp ${TEMPO_DIR}/util/cull/cull.pl ${TEMPO}/bin/cull && \
    cp ${TEMPO_DIR}/util/extract/extract.pl ${TEMPO}/bin/extract && \
    cp ${TEMPO_DIR}/util/obswgt/obswgt.pl ${TEMPO}//bin/obswg && \   
    cd ${TEMPO_DIR}/util/print_resid && \
    make -j && \
    cp print_resid ${TEMPO}/bin/ && \
    cp ${TEMPO_DIR}/util/res_avg/* ${TEMPO}/bin/ && \
    cp ${TEMPO_DIR}/util/wgttpo/wgttpo.pl ${TEMPO}/bin/wgttpo && \
    cp ${TEMPO_DIR}/util/wgttpo/wgttpo_emin.pl ${TEMPO}/bin/wgttpo_emin && \
    cp ${TEMPO_DIR}/util/wgttpo/wgttpo_equad.pl ${TEMPO}/bin/wgttpo_equad && \
    cd ${TEMPO_DIR}/util/ut1 && \
    gcc -o predict_ut1 predict_ut1.c $(gsl-config --libs) && \
    cp predict_ut1 check.ut1 do.iers.ut1 do.iers.ut1.new get_ut1 get_ut1_new make_ut1 ${TEMPO}/bin/ && \
    cp ${TEMPO_DIR}/util/compare_tempo/compare_tempo ${TEMPO}/bin/ && \
    cp ${TEMPO_DIR}/util/pubpar/pubpar.py ${TEMPO}/bin/ && \
    chmod +x ${TEMPO}/bin/pubpar.py && \
    cp ${TEMPO_DIR}/util/center_epoch/center_epoch.py ${TEMPO}/bin/ && \
    cd ${TEMPO_DIR}/util/avtime && \
    gfortran -o avtime avtime.f && \
    cp avtime ${TEMPO}/bin/ && \
    cd ${TEMPO_DIR}/util/non_tempo && \
    cp dt mjd aolst ${TEMPO}/bin/ && \
    cd ${TEMPO_DIR}

# presto (C and Python stuff)
RUN cd $PRESTO_DIR && \
    cd src && \
    make cleaner && \
    make prep && \
    make -j && \
    cd $PRESTO_DIR && \
    pip list && \
    pip install --prefix=$PSRHOME . && \
    cp $PRESTO_DIR/examplescripts/ACCEL_sift.py ${PRESTO}/bin/ && \
    sed -i 's/env python/env python3/' ${PRESTO}/bin/*py && \
    python3 ${PRESTO}/tests/test_presto_python.py && \
    cd src && \
    make clean
 
# riptide (C++ and Python stuff)
RUN cd $RIPTIDE_DIR && \
    sed -i "s:pip install -e:pip install --prefix=$PSRHOME:" Makefile && \
    make clean && \
    make install && \
#    make tests && \
    make clean
        


# finally update /etc/bash.bashrc and add simple command whoamI
USER root
RUN echo "echo \"Welcome to the MWA Pulsar container, with GUI interaction!\" " >> /etc/bash.bashrc && \
  echo "echo \"Try running the following: pgdemo1 \" " >> /etc/bash.bashrc && \
  echo "echo \"============ \" " >> /etc/bash.bashrc && \
  echo "echo \"If you encounter issues, please verify that you are bind mounting your .Xauthority file  \" " >> /etc/bash.bashrc && \
  echo "echo \"For example when running singularity: singularity -B \$HOME/.Xauthority your_container.sif pgdemo1  \" " >> /etc/bash.bashrc && \
  # add a command whoamI to container
  echo "#!/bin/bash" >> /usr/bin/whoamI && \
  echo "echo \"Welcome to the MWA Pulsar container, with GUI interaction\" " >> /usr/bin/whoamI && \
  echo "echo \"Try running the following: pgdemo1 \" " >> /usr/bin/whoamI && \
  echo "echo \"============ \" " >> /usr/bin/whoamI && \
  echo "echo \"If you encounter issues, please verify that you are bind mounting your .Xauthority file  \" " >> /usr/bin/whoamI && \
  echo "echo \"For example when running singularity: singularity -B \$HOME/.Xauthority your_container.sif pgdemo1  \" " >> /usr/bin/whoamI && \
  chmod a+rx /usr/bin/whoamI  

  
WORKDIR $HOME
USER root
